{
  "name": "gulp-path",
  "version": "3.0.2",
  "description": "Creates file's paths in a simple and organized way",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/klauskpm/gulp-path.git"
  },
  "keywords": [
    "gulp",
    "path",
    "gulp-path",
    "gulp-paths"
  ],
  "author": {
    "name": "Klaus Kazlauskas",
    "email": "klausmachado@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/klauskpm/gulp-path/issues"
  },
  "homepage": "https://github.com/klauskpm/gulp-path",
  "readme": "# gulp-path\r\n  \r\n  Creates file's paths in a simple and organized way\r\n  \r\n## Installation\r\n`$ npm install gulp-path`\r\n\r\n## Usage Example\r\n```js\r\nvar gulpPath = require('gulp-path');\r\n    \r\nvar assets = new gulpPath.Base({\r\n        src: './assets/',\r\n        dest: './resources/'\r\n    }),\r\n    views = new gulpPath.Base('./views/'),\r\n    root = new gulpPath.Base(),\r\n    app = new gulpPath.Base({\r\n        src: [\r\n            './app/',\r\n            './js/'\r\n        ],\r\n        dest: [\r\n            './dest/',\r\n            './concat/'\r\n        ]\r\n    });\r\n    \r\nvar paths = {\r\n        img: assets.Path('img'),\r\n        js: assets.Path('js', 'js'),\r\n        fonts: views.Path('fonts'),\r\n        controllers: root.Path('controllers', 'js'),\r\n        data: app.Path()\r\n    };\r\n    \r\nconsole.log(\r\n    paths.img.files(null, ['png', 'jpg', 'gif']),\r\n    paths.img.files(),\r\n    paths.js.files(['compiled', 'main'], 'min.js'),\r\n    paths.fonts.files(['Roboto', 'glyphicons-halflings-regular'], ['eot', 'ttf', 'svg', 'woff', 'woff2']),\r\n    paths.controllers.files('homeController', ['min.js', 'js']),\r\n    paths.data.files(['main', 'sub-service'], ['min.js', 'js']),\r\n    gulpPath.filesPaths(['./app/', './resource/**/'], null, ['scss', 'css'])\r\n);\r\n```\r\n\r\n### Creating base paths\r\nAfter you require the gulp-path model (`var gulpPath = require('gulp-path')`),\r\nyou need to create your base paths.  \r\nAnd for that, you have 3 ways to do it.\r\n\r\n- Imperative mode (As an Object)\r\n    - This is the only way you can choose different paths for your destination\r\n     and source files;  \r\n        Ex: `var assets = new gulpPath.Base({ src: './assets/', dest: './resources/' });`\r\n    - You also could set multiple base paths for source and destination files;  \r\n        Ex: `var assets = new gulpPath.Base({ src: ['./assets/', './app/'], dest: ['./resources/', './views/'] });`\r\n- Kinda-care mode (As a String)\r\n    - Setting up as a string, will make your paths for destination and source\r\n    files be the same;  \r\n        Ex: `var public = new gulpPath.Base('./public/');`\r\n- I'm not even looking mode (Nothing, really)\r\n    - Just calling it will make your paths for destination and source files to\r\n    be the same, and will be setted as `'./'`;  \r\n        Ex: `var app = new gulpPath.Base();`\r\n        \r\nIn every option above, it will return this very same Object:\r\n```js\r\n{\r\n    basePaths: {\r\n        src: './source/path',\r\n        dest: './destination/path'\r\n    },\r\n    // Path class will be explained in the following\r\n    Path: function ([paths , extensions]) {},\r\n    // filesPath method will be explained in the following\r\n    filesPath: function([paths, files, extensions])\r\n}\r\n```\r\n\r\n### Creating paths with Path Class\r\nAfter the base paths had been created, you can now create your paths.  \r\n\r\nAfter **v3.0.0**, the first parameter(paths) is optional as the second parameter(extensions)\r\n```js\r\n// Setting paths\r\nvar paths = {\r\n        // img.src          = [ './assets/img/**/*' ]\r\n        // img.dest         = [ './resources/img/' ]\r\n        img: assets.Path('img'),\r\n        // js.src           = [ './assets/js/**/*.js' ]\r\n        // js.dest          = [ './resources/js/' ]\r\n        js: assets.Path('js', 'js'),\r\n        // fonts.src        = [ './views/fonts/**/*' ]\r\n        // fonts.dest       = [ './views/fonts/' ]\r\n        fonts: views.Path('fonts'),\r\n        // controllers.src  = [ './controllers/**/*.js' ]\r\n        // controllers.dest = [ './controllers/' ]\r\n        controllers: root.Path('controllers', 'js'),\r\n        // data.src         = [ './app/**/*', './js/**/*' ]\r\n        // data.dest        = [ './dest/', './concat/' ]\r\n        data: app.Path()\r\n    };\r\n```\r\n\r\nAs response, you will recieve the Path Class with the following\r\nstructure:\r\n```js\r\nPath = function ([path , extension]) {\r\n    this.dest = ['./destBasePath[/filesPath]/'];\r\n    this.src = ['./srcBasePath[/filesPath]/**/*[.extension]'];\r\n    // Return the files passed with the source path\r\n    this.files = function ([files , filesExtension]) {};\r\n}\r\n```\r\n\r\n### Generating files blob with **files paths** function\r\nSo, now you already declared your paths, but still is a pain to write all the\r\npaths like bellow right?\r\n```js\r\nvar paths = {\r\n    js: [\r\n        './assets/js/main.min.js',\r\n        './assets/js/compiled.min.js',\r\n        './assets/js/rocks.min.js',\r\n        './assets/js/html5-parser.min.js',\r\n    ]\r\n};\r\n```\r\n\r\nThose days are over. Now you just need to call `Path.files([files , \r\nfilesExtension]);` or `filesPaths([paths, files, extensions])`.  \r\n```js\r\npaths.js.files(['main', 'compiled', 'rocks', 'html5-parser'], 'min.js');\r\n// or\r\nfilesPaths('./assets/', ['main', 'compiled', 'rocks', 'html5-parser'], 'min.js');\r\n```",
  "readmeFilename": "README.md",
  "_id": "gulp-path@3.0.2",
  "dist": {
    "shasum": "83e219972e17e9215984f41a7b6ae11e776ff25b"
  },
  "_from": "gulp-path@",
  "_resolved": "https://registry.npmjs.org/gulp-path/-/gulp-path-3.0.2.tgz"
}
